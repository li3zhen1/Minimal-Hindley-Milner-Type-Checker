// Generated from Sources/antlr-g4/Lang.g4 by ANTLR 4.13.1
import Antlr4

open class LangLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = LangLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(LangLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, 
            T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, 
            T__15=16, T__16=17, T__17=18, IntegerLiteral=19, RealLiteral=20, 
            StringLiteral=21, BooleanLiteral=22, BinaryOperator=23, Identifier=24, 
            Alpha=25, Digit=26, Whitespace=27, Comment=28

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "IntegerLiteral", "RealLiteral", "StringLiteral", "BooleanLiteral", 
		"BinaryOperator", "Identifier", "Alpha", "Digit", "Whitespace", "Comment"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "'type'", "'='", "'('", "')'", "','", "'|'", "'->'", "':'", "'.'", 
		"'let'", "'in'", "'{'", "'}'", "'func'", "'=>'", "'if'", "'then'", "'else'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		nil, nil, nil, nil, nil, "IntegerLiteral", "RealLiteral", "StringLiteral", 
		"BooleanLiteral", "BinaryOperator", "Identifier", "Alpha", "Digit", "Whitespace", 
		"Comment"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return LangLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, LangLexer._ATN, LangLexer._decisionToDFA, LangLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "Lang.g4" }

	override open
	func getRuleNames() -> [String] { return LangLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return LangLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return LangLexer.channelNames }

	override open
	func getModeNames() -> [String] { return LangLexer.modeNames }

	override open
	func getATN() -> ATN { return LangLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,28,183,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,
		1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,114,8,18,10,18,12,18,117,9,
		18,1,19,1,19,1,19,1,19,1,20,1,20,5,20,125,8,20,10,20,12,20,128,9,20,1,
		20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,141,8,21,1,22,
		1,22,1,22,1,22,1,22,1,22,3,22,149,8,22,1,23,1,23,1,23,5,23,154,8,23,10,
		23,12,23,157,9,23,1,24,1,24,1,25,1,25,1,26,4,26,164,8,26,11,26,12,26,165,
		1,26,1,26,1,27,1,27,1,27,1,27,5,27,174,8,27,10,27,12,27,177,9,27,1,27,
		1,27,1,27,1,27,1,27,2,126,175,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,1,0,4,3,0,42,43,45,45,
		47,47,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,192,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,
		1,0,0,0,3,62,1,0,0,0,5,64,1,0,0,0,7,66,1,0,0,0,9,68,1,0,0,0,11,70,1,0,
		0,0,13,72,1,0,0,0,15,75,1,0,0,0,17,77,1,0,0,0,19,79,1,0,0,0,21,83,1,0,
		0,0,23,86,1,0,0,0,25,88,1,0,0,0,27,90,1,0,0,0,29,95,1,0,0,0,31,98,1,0,
		0,0,33,101,1,0,0,0,35,106,1,0,0,0,37,111,1,0,0,0,39,118,1,0,0,0,41,122,
		1,0,0,0,43,140,1,0,0,0,45,148,1,0,0,0,47,150,1,0,0,0,49,158,1,0,0,0,51,
		160,1,0,0,0,53,163,1,0,0,0,55,169,1,0,0,0,57,58,5,116,0,0,58,59,5,121,
		0,0,59,60,5,112,0,0,60,61,5,101,0,0,61,2,1,0,0,0,62,63,5,61,0,0,63,4,1,
		0,0,0,64,65,5,40,0,0,65,6,1,0,0,0,66,67,5,41,0,0,67,8,1,0,0,0,68,69,5,
		44,0,0,69,10,1,0,0,0,70,71,5,124,0,0,71,12,1,0,0,0,72,73,5,45,0,0,73,74,
		5,62,0,0,74,14,1,0,0,0,75,76,5,58,0,0,76,16,1,0,0,0,77,78,5,46,0,0,78,
		18,1,0,0,0,79,80,5,108,0,0,80,81,5,101,0,0,81,82,5,116,0,0,82,20,1,0,0,
		0,83,84,5,105,0,0,84,85,5,110,0,0,85,22,1,0,0,0,86,87,5,123,0,0,87,24,
		1,0,0,0,88,89,5,125,0,0,89,26,1,0,0,0,90,91,5,102,0,0,91,92,5,117,0,0,
		92,93,5,110,0,0,93,94,5,99,0,0,94,28,1,0,0,0,95,96,5,61,0,0,96,97,5,62,
		0,0,97,30,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,32,1,0,0,0,101,
		102,5,116,0,0,102,103,5,104,0,0,103,104,5,101,0,0,104,105,5,110,0,0,105,
		34,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,108,109,5,115,0,0,109,110,
		5,101,0,0,110,36,1,0,0,0,111,115,3,51,25,0,112,114,3,51,25,0,113,112,1,
		0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,38,1,0,0,0,117,
		115,1,0,0,0,118,119,3,37,18,0,119,120,5,46,0,0,120,121,3,37,18,0,121,40,
		1,0,0,0,122,126,5,34,0,0,123,125,9,0,0,0,124,123,1,0,0,0,125,128,1,0,0,
		0,126,127,1,0,0,0,126,124,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,
		130,5,34,0,0,130,42,1,0,0,0,131,132,5,116,0,0,132,133,5,114,0,0,133,134,
		5,117,0,0,134,141,5,101,0,0,135,136,5,102,0,0,136,137,5,97,0,0,137,138,
		5,108,0,0,138,139,5,115,0,0,139,141,5,101,0,0,140,131,1,0,0,0,140,135,
		1,0,0,0,141,44,1,0,0,0,142,149,7,0,0,0,143,144,5,38,0,0,144,149,5,38,0,
		0,145,146,5,124,0,0,146,149,5,124,0,0,147,149,5,94,0,0,148,142,1,0,0,0,
		148,143,1,0,0,0,148,145,1,0,0,0,148,147,1,0,0,0,149,46,1,0,0,0,150,155,
		3,49,24,0,151,154,3,51,25,0,152,154,3,49,24,0,153,151,1,0,0,0,153,152,
		1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,48,1,0,0,0,
		157,155,1,0,0,0,158,159,7,1,0,0,159,50,1,0,0,0,160,161,7,2,0,0,161,52,
		1,0,0,0,162,164,7,3,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,
		0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,6,26,0,0,168,54,1,0,0,0,169,
		170,5,47,0,0,170,171,5,42,0,0,171,175,1,0,0,0,172,174,9,0,0,0,173,172,
		1,0,0,0,174,177,1,0,0,0,175,176,1,0,0,0,175,173,1,0,0,0,176,178,1,0,0,
		0,177,175,1,0,0,0,178,179,5,42,0,0,179,180,5,47,0,0,180,181,1,0,0,0,181,
		182,6,27,0,0,182,56,1,0,0,0,9,0,115,126,140,148,153,155,165,175,1,6,0,
		0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}